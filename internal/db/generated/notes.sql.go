// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: notes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (content, expires_at, format)
VALUES ($1, $2, $3)
RETURNING id, slug, content, expires_at, format, created_at, updated_at
`

type CreateNoteParams struct {
	Content   string             `json:"content"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	Format    pgtype.Text        `json:"format"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.Content, arg.ExpiresAt, arg.Format)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Content,
		&i.ExpiresAt,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredNotes = `-- name: DeleteExpiredNotes :exec
DELETE FROM notes
WHERE expires_at IS NOT NULL AND expires_at < NOW()
`

func (q *Queries) DeleteExpiredNotes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredNotes)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const getNoteByID = `-- name: GetNoteByID :one
SELECT id, slug, content, expires_at, format, created_at, updated_at FROM notes
WHERE id = $1
`

func (q *Queries) GetNoteByID(ctx context.Context, id pgtype.UUID) (Note, error) {
	row := q.db.QueryRow(ctx, getNoteByID, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Content,
		&i.ExpiresAt,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNoteBySlug = `-- name: GetNoteBySlug :one
SELECT id, slug, content, expires_at, format, created_at, updated_at FROM notes
WHERE slug = $1
`

func (q *Queries) GetNoteBySlug(ctx context.Context, slug string) (Note, error) {
	row := q.db.QueryRow(ctx, getNoteBySlug, slug)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Content,
		&i.ExpiresAt,
		&i.Format,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET content = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateNoteParams struct {
	ID      pgtype.UUID `json:"id"`
	Content string      `json:"content"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.Exec(ctx, updateNote, arg.ID, arg.Content)
	return err
}
